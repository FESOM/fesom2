.. _chap_meshes:

Meshes
******

Mesh files
==========

FESOM2 as well as FESOM1.4 is formulated on general triangular meshes. There are three mesh files that are read: ``nod2d.out, elem2d.out`` and ``aux3d.out``. Those three files are enough to define a mesh. The files are written as simple ASCII files storing the information on the coordinates of mesh vertices, on how vertices are combined in triangles and on bottom depth at vertices.
The format of the files is as follows:

nod2d.out
^^^^^^^^^

+----------+-----------+-----------+------------+
|:math:`V` |           |           |            |
+----------+-----------+-----------+------------+
|:math:`v` |:math:`x_1`|:math:`y_1`|:math:`i_1` |
+----------+-----------+-----------+------------+
|...       |...        |...        | ...        |
+----------+-----------+-----------+------------+
|:math:`V` |:math:`x_V`|:math:`y_V`|:math:`i_V` |
+----------+-----------+-----------+------------+

Here :math:`V` is the number of surface vertices, :math:`x_v` and :math:`y_v` are the longitude and latitude (in angular measure) of vertex :math:`v`, and :math:`i_v` the index of vertex :math:`v`. This field is obsolete and is kept for mesh compatibility with FESOM1.4.

elem2d.out
^^^^^^^^^^

+--------------+--------------+--------------+
|:math:`C`     |              |              |
+--------------+--------------+--------------+
|:math:`v_{11}`|:math:`v_{12}`|:math:`v_{13}`|
+--------------+--------------+--------------+
|...           |...           |...           |
+--------------+--------------+--------------+
|:math:`v_{C1}`|:math:`v_{C2}`|:math:`v_{C3}`|
+--------------+--------------+--------------+

Here :math:`C` is the number of triangles, :math:`v_{c1}`, :math:`v_{c2}`, :math:`v_{c3}` are the vertices of triangle (cell) :math:`c`. The indexes and coordinates of vertices are provided in the ``nod2d`` file (:math:`v`).

aux3d.out (to be renamed to depth.out)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

+--------------+
|:math:`L`     |
+--------------+
|:math:`h_{1}` |
+--------------+
|...           |
+--------------+
|:math:`h_{l}` |
+--------------+
|...           |
+--------------+
|:math:`h_{L}` |
+--------------+
|:math:`H_{1}` |
+--------------+
|...           |
+--------------+
|:math:`H_{v}` |
+--------------+
|...           |
+--------------+
|:math:`H_{V}` |
+--------------+

Here :math:`L` is the number of model levels (e.g. sstandard is 48), :math:`h_{l}` is the depth of each model level and :math:`H_{v}` is the depth at each vertex defined in ``nod2d.out`` file.

Those three files are read during the mesh partitioning and several additional files are generated by the partitioner in the folder where the mesh files are located.

Mesh arrays
===========

The ``nod2d.out``, ``elem2d.out`` and ``aux3s.out`` files are read in variables and arrays with names inherited from FESOM1.4 where vertices were dubbed nodes and cells elements. Full files are only read on mesh partitioning step. Local copies are saved for each PE and read in production runs.

Name correspondence
^^^^^^^^^^^^^^^^^^^

- :math:`V\,\to {\tt nod2D}`

- :math:`C\,\to {\tt elem2D}`

- The array ``coord_nod2D(1:2,1:myDim_nod2D+eDim_nod2D)`` stores vertex coordinates in radian measure.``1:myDim_nod2D`` are the vertices that belong to my PE (``myPE``), and ``myDim_nod2D+1:myDim_nod2D+eDim_nod2D`` are the halo vertices. The halo vertices share a common triangle with vertices that belong to ``myPE``, yet do not belong to the ``myPE`` themselves.

- Each column of array ``elem2D_nodes(1:3,1:myDim_elem2D+eDim_elem2D+eXDim_elem2D)`` stores vertex indices of particular triangle. ``1:myDim_elem2D`` are the triangles that belong to ``myPE``, which are those that contain at least one vertex that belongs to ``myPE``. Thus, triangles with vertices that belong to several PE are counted as my triangle by each PE. The rest combines two types of halo: First triangles sharing an edge with my triangles are added, and then triangles that share vertex with my triangles, but are absent in the smaller halo.

- Local numbering is used on each PE. Additional arrays are available to do local to global transform if needed.


Auxiliary mesh arrays
=====================

Edge arrays:
^^^^^^^^^^^^

- :math:`E\,\to$ {\tt edge2D}`
- ``edge(1:2, myDim_edge2D+eDim_edge2D)`` is the array storing vertices of an edge (its columns are the code analog of the set :math:`V(e)`)
- ``edge_tri(1:2, myDim_edge2D+eDim_edge2D)`` is the array storing triangles on the left and right of the edge (its columns correspond to :math:`C(e)`).
- ``elem2D_edges(1:3, 1:myDim_elem2D)`` stores edges of triangles. It columns correspond to :math:`E(c)`
- ``edge_dxdy(2,myDim_edge2D+eDim_edge2D)`` stores :math:`\mathbf{l}_e` in radian measure.
- ``edge_cross_dxdy(4,myDim_edge2D+eDim_edge2D)`` stores two cross-edge :math:`{\bf d}_{ec}` vectors in physical measure (meters).


Neighborhood arrays:
^^^^^^^^^^^^^^^^^^^^

- Two arrays ``nod_in_elem2D_num, nod_in_elem2D`` store the number of cell neighbors and their indices for vertex :math:`v` (correspond to :math:`C(v)`)
- Two arrays ``nod_neighbr_num``, ``nod_neighbr`` store the number of vertex neighbors and their indices for vertex :math:`v` (correspond to :math:`V(v)`)

Areas and derivatives:

- ``elem_area(1:myDim_elem2D+eDim_elem2D+eXDim_elem2D)`` stores areas of elements computed using local flat metrics on elements.
- ``areas(1:K,1:myDim_nod2D+eDim_nod2D)`` are the horizontal areas of scalar control volumes. They are computed combining contributions from triangles.


Modularity
==========

All arrays related to mesh are packed in a structure of derived type ``mesh``, which is passed as an argument to routines using mesh arrays (nearly all routines). In order to keep the array names in subroutines compatible with the old FESOM names (the names listed above), there are pointer associations between the fields of the structure and the names used above. Coding can rely on old names. The same logics is pursued with all other derived data types. This also reflects history of code development. The code was initially using global arrays, which prevented modularity.
