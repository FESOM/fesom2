diff a/src/icb_step.F90 b/src/icb_step.F90	(rejected hunks)
@@ -376,22 +407,23 @@ type(t_dyn)   , intent(inout), target :: dynamics
   call point_in_triangle(mesh, partit, iceberg_elem, coords_tmp)
   !call point_in_triangle(mesh, iceberg_elem, (/lon_deg, lat_deg/))
   i_have_element= (iceberg_elem .ne. 0) !up to 3 PEs possible
+!write(*,*) "LA DEBUG: 4a"
   
   if(i_have_element) then
+!write(*,*) "LA DEBUG: 4a1"
    i_have_element= mesh%elem2D_nodes(1,iceberg_elem) <= partit%myDim_nod2D !1 PE still .true.
-#ifdef use_cavity
-   if(reject_elem(mesh, partit, iceberg_elem)) then
+!write(*,*) "LA DEBUG: 4a2"
+   if( (use_cavity) .and. (reject_elem(mesh, partit, iceberg_elem))) then
     iceberg_elem=0 !reject element
     i_have_element=.false.
    else 
     iceberg_elem=partit%myList_elem2D(iceberg_elem) !global now
    end if
-#else
-   
-   iceberg_elem=partit%myList_elem2D(iceberg_elem) !global now
-#endif 
+!write(*,*) "LA DEBUG: 4a3"
   end if
+!write(*,*) "LA DEBUG: 4b"
   call com_integer(partit, i_have_element,iceberg_elem)
+!write(*,*) "LA DEBUG: 4c"
  
   if(iceberg_elem .EQ. 0) then
         write(*,*) 'IB ',ib,' rot. coords:', lon_deg, lat_deg !,lon_rad, lat_rad
@@ -983,15 +1023,14 @@ end subroutine depth_bathy
 !****************************************************************************************************************************
 
 subroutine parallel2coast(mesh, partit,u, v, lon,lat, elem)
-!#ifdef use_cavity
-! use iceberg_params, only: coastal_nodes
-!#endif
+ use iceberg_params, only: coastal_nodes
  implicit none
  
  real, intent(inout) 	:: u, v 	!velocity
  real, intent(in)	:: lon, lat 	!radiant
  integer, intent(in)	:: elem
  
+ integer :: fld_tmp
  integer, dimension(3) :: n
  integer :: node, m, i
  real, dimension(2) :: velocity, velocity1, velocity2
@@ -1004,12 +1043,13 @@ type(t_partit), intent(inout), target :: partit
 #include "associate_part_ass.h"
 #include "associate_mesh_ass.h"
 
-#ifdef use_cavity
-  SELECT CASE ( coastal_nodes(mesh, elem) ) !num of "coastal" points
-#else
-  SELECT CASE ( sum( mesh%bc_index_nod2D(mesh%elem2D_nodes(:,elem)) ) ) !num of coastal points
-  !SELECT CASE ( sum( bc_index_nod2D(elem2D_nodes(:,elem)) ) ) !num of coastal points
-#endif
+  if( use_cavity ) then
+    fld_tmp = coastal_nodes(mesh, partit, elem)
+  else
+    fld_tmp = sum( mesh%bc_index_nod2D(mesh%elem2D_nodes(:,elem)) )
+  end if
+  
+  SELECT CASE ( fld_tmp ) !num of coastal points
    CASE (0) !...coastal points: do nothing
     return
     
@@ -1020,14 +1060,18 @@ type(t_partit), intent(inout), target :: partit
     do m = 1, 3
       node = mesh%elem2D_nodes(m,elem)
       !write(*,*) 'index ', m, ':', index_nod2D(node)
-#ifdef use_cavity
-      if( mesh%bc_index_nod2D(node)==1 .OR. cavity_flag_nod2d(node)==1 ) then
-#else
-      if( mesh%bc_index_nod2D(node)==1 ) then
-#endif
-       n(i) = node
-       exit
-      end if 
+      if( use_cavity ) then
+        !if( mesh%bc_index_nod2D(node)==1 .OR. cavity_flag_nod2d(node)==1 ) then
+        if( mesh%bc_index_nod2D(node)==0.0 .OR.  (mesh%cavity_depth(node)/=0.0) ) then
+         n(i) = node
+         exit
+        end if 
+      else
+        if( mesh%bc_index_nod2D(node)==1 ) then
+         n(i) = node
+         exit
+        end if 
+      end if
     end do 
     
    !write(*,*) 'one coastal node ', n(1)
@@ -1075,13 +1119,17 @@ type(t_partit), intent(inout), target :: partit
     velocity = [ u, v ]
     do m = 1, 3
       node = mesh%elem2D_nodes(m,elem) 
-#ifdef use_cavity
-      if( (mesh%bc_index_nod2D(node)==1) .OR. (cavity_flag_nod2d(node)==1)) then
-#else
-      if( mesh%bc_index_nod2D(node)==1 ) then
-#endif
-       n(i) = node
-       i = i+1
+      if( use_cavity ) then
+        !if( (mesh%bc_index_nod2D(node)==1) .OR. (cavity_flag_nod2d(node)==1)) then
+        if( mesh%bc_index_nod2D(node)==0.0 .OR.  (mesh%cavity_depth(node)/=0.0) ) then
+         n(i) = node
+         i = i+1
+        end if
+      else
+        if( mesh%bc_index_nod2D(node)==1 ) then
+         n(i) = node
+         i = i+1
+        end if
       end if
     end do   
     call projection(mesh,partit,  velocity, n(1), n(2))
