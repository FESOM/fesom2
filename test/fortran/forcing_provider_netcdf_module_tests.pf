module forcing_provider_netcdf_module_tests
  use forcing_provider_netcdf_module
  use funit; implicit none
  
contains  


  @test
  subroutine test_can_read_timestep1_and_5_twice()
    character(:), allocatable :: filepath
    character(:), allocatable :: varname
    type(netcdf_reader_handle) handle
    real(4), allocatable :: values(:,:,:)

    filepath = "fixtures/test.1948.nc"
    varname = "q"

    call handle%initialize(filepath, varname)

    call handle%read_netcdf_timesteps(1, 1, values)
    @assertEqual(0.0000, values(1,1, 1), tolerance=1.e-6)  
    @assertEqual(0.0001, values(2,1, 1), tolerance=1.e-6)  
    @assertEqual(0.0007, values(2,3, 1), tolerance=1.e-6)  

    call handle%read_netcdf_timesteps(5, 5, values)
    @assertEqual(0.0048, values(1,1, 1), tolerance=1.e-6)  
    @assertEqual(0.0049, values(2,1, 1), tolerance=1.e-6)  
    @assertEqual(0.0055, values(2,3, 1), tolerance=1.e-6)
    
    call handle%finalize()
  end subroutine


  @test
  subroutine test_can_read_timestep_size_of_variable()
    type(netcdf_reader_handle) handle

    call handle%initialize("fixtures/test.1948.nc", "q")
    @assertEqual(5, handle%timestep_size())
   
    call handle%finalize()
  end subroutine


  @test
  subroutine test_can_read_netcdf_2d()
    type(netcdf_reader_handle) handle
    real(4), allocatable :: values(:,:)

    call handle%initialize("fixtures/test.1948.nc", "q")

    call handle%read_netcdf_timestep_2d(1, values)
    @assertEqual(0.0000, values(1,1), tolerance=1.e-6)  
    @assertEqual(0.0001, values(2,1), tolerance=1.e-6)  
    @assertEqual(0.0007, values(2,3), tolerance=1.e-6)  
    
    call handle%finalize()
  end subroutine

end module
