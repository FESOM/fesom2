module mpi_topology_module_tests
    use mpi_topology_module
    use pFUnit ! not FUnit
    implicit none

contains

  @before
  subroutine setup(mpitest)
    class(MpiTestMethod), intent(inout) :: mpitest
  end subroutine

  @after
  subroutine teardown(mpitest)
    class(MpiTestMethod), intent(inout) :: mpitest
    
    call mpi_topology%reset_state()
  end subroutine


  @test(npes=[3])
  subroutine next_host_head_rank_ShouldAlwaysBeZeroForFirstCall(mpitest)
    class(MpiTestMethod), intent(inout) :: mpitest
    integer next
    
    next = mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator())
    @assertEqual(0, next)
  end subroutine


  @test(npes=[3])
  subroutine testHeadIsDifferentForOnlyDifferentHosts(mpitest)
    class(MpiTestMethod), intent(inout) :: mpitest
    character(1), dimension(3) :: hostnames = ["a","b","c"]

    call mpi_topology%set_hostname_strategy(hostname_mock)

    @assertEqual(0, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))  
    @assertEqual(1, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))  
    @assertEqual(2, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))  

  contains

    subroutine hostname_mock(hostname)
      implicit none
      character(len=:), allocatable, intent(out) :: hostname

      allocate(character(32) :: hostname)
      write(hostname, '(aa)') 'mockhost_', hostnames(mpitest%getProcessRank()+1)
    end subroutine
  end subroutine


  @test(npes=[6])
  subroutine testHeadIsDifferentForSomeDifferentHosts(mpitest)
    class(MpiTestMethod), intent(inout) :: mpitest
    character(1), dimension(6) :: hostnames = ["a","a","b","b","c","c"]

    call mpi_topology%set_hostname_strategy(hostname_mock2)

    @assertEqual(0, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))  
    @assertEqual(2, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))  
    @assertEqual(4, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))  
    @assertEqual(1, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))  

  contains

    subroutine hostname_mock2(hostname)
      implicit none
      character(len=:), allocatable, intent(out) :: hostname
      
      allocate(character(32) :: hostname)
      write(hostname, '(aa)') 'mockhost_', hostnames(mpitest%getProcessRank()+1)
     end subroutine
  end subroutine


  @test(npes=[6])
  subroutine testFirstHeadRankIsIncrementedForTwoRounds(mpitest)
    class(MpiTestMethod), intent(inout) :: mpitest
    character(1), dimension(6) :: hostnames = ["a","a","b","b","c","c"]

    call mpi_topology%set_hostname_strategy(hostname_mock2)

    @assertEqual(0, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))  
    @assertEqual(2, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))  
    @assertEqual(4, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))  
    @assertEqual(1, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))  
    @assertEqual(3, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))  
    @assertEqual(5, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))  

  contains

    subroutine hostname_mock2(hostname)
      implicit none
      character(len=:), allocatable, intent(out) :: hostname
      
      allocate(character(32) :: hostname)
      write(hostname, '(aa)') 'mockhost_', hostnames(mpitest%getProcessRank()+1)
     end subroutine
  end subroutine


  @test(npes=[6])
  subroutine next_host_head_rank_ShouldBeZeroAfterLastRank(mpitest)
    class(MpiTestMethod), intent(inout) :: mpitest
    character(1), dimension(6) :: hostnames = ["a","a","b","b","c","c"]
    integer i, r
    call mpi_topology%set_hostname_strategy(hostname_mock2)

    ! exhaust the available ranks
    do i=1, mpitest%getNumProcesses()
      r = mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator())
    end do
    
    @assertEqual(0, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))
    @assertEqual(2, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))  
    @assertEqual(4, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))  

  contains

    subroutine hostname_mock2(hostname)
      implicit none
      character(len=:), allocatable, intent(out) :: hostname
      
      allocate(character(32) :: hostname)
      write(hostname, '(aa)') 'mockhost_', hostnames(mpitest%getProcessRank()+1)
     end subroutine
  end subroutine


  @test(npes=[4])
  subroutine next_host_head_rank_UsecountShouldBe1ForFirstLap(mpitest)
    class(MpiTestMethod), intent(inout) :: mpitest
    character(1), dimension(4) :: hostnames = ["a","a","b","b"]
    integer i, r, usecount
    call mpi_topology%set_hostname_strategy(hostname_mock)

    @assertEqual(0, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator(), usecount))
    @assertEqual(1, usecount)
    @assertEqual(2, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator(), usecount))
    @assertEqual(1, usecount)

  contains

    subroutine hostname_mock(hostname)
      implicit none
      character(len=:), allocatable, intent(out) :: hostname
      
      allocate(character(32) :: hostname)
      write(hostname, '(aa)') 'mockhost_', hostnames(mpitest%getProcessRank()+1)
     end subroutine
  end subroutine


  @test(npes=[4])
  subroutine next_host_head_rank_UsecountShouldBe1ForSecondLap(mpitest)
    class(MpiTestMethod), intent(inout) :: mpitest
    character(1), dimension(4) :: hostnames = ["a","a","b","b"]
    integer i, r, usecount
    call mpi_topology%set_hostname_strategy(hostname_mock)

    @assertEqual(0, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))
    @assertEqual(2, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator()))

    @assertEqual(1, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator(), usecount))
    @assertEqual(1, usecount)
    @assertEqual(3, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator(), usecount))
    @assertEqual(1, usecount)

  contains

    subroutine hostname_mock(hostname)
      implicit none
      character(len=:), allocatable, intent(out) :: hostname
      
      allocate(character(32) :: hostname)
      write(hostname, '(aa)') 'mockhost_', hostnames(mpitest%getProcessRank()+1)
     end subroutine
  end subroutine


  @test(npes=[6])
  subroutine next_host_head_rank_UsecountShouldIncrementAfterLastRank(mpitest)
    class(MpiTestMethod), intent(inout) :: mpitest
    character(1), dimension(6) :: hostnames = ["a","a","a","b","b","b"]
    integer i, r, usecount
    call mpi_topology%set_hostname_strategy(hostname_mock2)

    ! exhaust the available ranks to start over with rank 0
    do i=1, mpitest%getNumProcesses()
      r = mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator())
    end do
    
    @assertEqual(0, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator(), usecount))
    @assertEqual(2, usecount)
    @assertEqual(3, mpi_topology%next_host_head_rank(mpitest%getMpiCommunicator(), usecount))
    @assertEqual(2, usecount)

  contains

    subroutine hostname_mock2(hostname)
      implicit none
      character(len=:), allocatable, intent(out) :: hostname
      
      allocate(character(32) :: hostname)
      write(hostname, '(aa)') 'mockhost_', hostnames(mpitest%getProcessRank()+1)
     end subroutine
  end subroutine

end module
